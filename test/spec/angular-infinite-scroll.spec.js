// Generated by CoffeeScript 1.10.0
(function() {
  var calculateChildrenHeightScript, collapseItemsScript, containers, fs, getElementByIdScript, getItems, getTemplate, mkdirp, pathToDocument, scrollToBottomScript, scrollToLastScreenScript, tmpDir;

  fs = require("fs");

  mkdirp = require("mkdirp");

  getTemplate = function(angularVersion, container, attrs, throttle) {
    return "<!doctype html>\n<head>\n  <style>\n    html, body {\n      height: 100%;\n    }\n  </style>\n  <script src='http://ajax.googleapis.com/ajax/libs/angularjs/" + angularVersion + "/angular.min.js'></script>\n  <script src=\"../../build/angular-infinite-scroll.js\"></script>\n  <script>\n    angular.module('app', ['angularInfiniteScroll'])\n      .config(function ($provide) {\n        $provide.value('THROTTLE_MILLISECONDS', " + throttle + ");\n      })\n      .run(function ($rootScope) {\n        $rootScope.items = [];\n        $rootScope.loadMore = function () {\n          [].push.apply($rootScope.items, new Array(100));\n        };\n\n        $rootScope.busy = true;\n\n        $rootScope.enable = function () {\n          $rootScope.busy = false;\n        };\n\n        $rootScope.triggerEvent = function () {\n          $rootScope.$emit('anEvent');\n        };\n      });\n  </script>\n</head>\n<body ng-app=\"app\">\n  <a id=\"action\" ng-click=\"enable()\">Enable</a>\n  <a id=\"force\" ng-click=\"loadMore()\">Force</a>\n  <a id=\"trigger\" ng-click=\"triggerEvent()\">Trigger</a>\n  " + containers[container].start + "\n    <div infinite-scroll=\"loadMore()\" " + containers[container].attr + " " + attrs + ">\n      <p ng-repeat='item in items track by $index'>\n        {{$index}}\n      </p>\n    </div>\n  " + containers[container].end + "\n</body>";
  };

  containers = {
    window: {
      start: "",
      end: "",
      attr: ""
    },
    parent: {
      start: "<div id='parent' style='height: 50%; overflow: auto;'>",
      end: "</div>",
      attr: "infinite-scroll-parent"
    },
    ancestor: {
      start: "<div id='ancestor' style='height: 50%; overflow: auto;'><div>",
      end: "</div></div>",
      attr: "infinite-scroll-container='\"#ancestor\"'"
    }
  };

  getElementByIdScript = function(id) {
    return "document.getElementById('" + id + "')";
  };

  calculateChildrenHeightScript = function(id) {
    return "[].concat.apply([], " + (getElementByIdScript(id)) + ".childNodes)\n  .map(function (el) { return el.offsetHeight ? el.offsetHeight : 0; })\n  .reduce(function (cur, prev) { return prev + cur; }, 0)";
  };

  scrollToBottomScript = function(container) {
    if (container === "window") {
      return "window.scrollTo(0, document.body.scrollHeight)";
    } else {
      return (getElementByIdScript(container)) + ".scrollTop = " + (calculateChildrenHeightScript(container));
    }
  };

  scrollToLastScreenScript = function(container, offset) {
    if (container === "window") {
      return "window.scrollTo(0, document.body.scrollHeight - 2 * window.innerHeight + " + offset + ")";
    } else {
      return (getElementByIdScript(container)) + ".scrollTop =\n  " + (calculateChildrenHeightScript(container)) + " - 2 * " + (getElementByIdScript(container)) + ".offsetHeight + " + offset;
    }
  };

  collapseItemsScript = function(container) {
    return "var items = document.getElementsByTagName('p')\nfor (i = 0; i < items.length; ++i) {\n  items[i].style.display = 'none'\n}";
  };

  getItems = function() {
    return element.all(By.repeater("item in items"));
  };

  tmpDir = ".tmp";

  pathToDocument = tmpDir + "/index.html";

  describe("angular-infinite-scroll", function() {
    var angularVersion, i, len, ref, results;
    ref = ["1.2.0", "1.3.4"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      angularVersion = ref[i];
      results.push(describe("with Angular " + angularVersion, function() {
        var container, j, len1, ref1, results1;
        ref1 = ["window", "ancestor", "parent"];
        results1 = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          container = ref1[j];
          results1.push(describe("with " + container + " as container", function() {
            var replaceIndexFile;
            replaceIndexFile = function(attrs, throttle) {
              mkdirp(tmpDir);
              return fs.writeFileSync(pathToDocument, getTemplate(angularVersion, container, attrs, throttle));
            };
            describe("without throttling", function() {
              var throttle;
              throttle = null;
              it("should be triggered immediately and when container is scrolled to the bottom", function() {
                replaceIndexFile("", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToBottomScript(container));
                return expect(getItems().count()).toBe(200);
              });
              it("does not trigger immediately when infinite-scroll-immediate-check is false", function() {
                replaceIndexFile("infinite-scroll-immediate-check='false'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(0);
                element(By.id("force")).click();
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToBottomScript(container));
                return expect(getItems().count()).toBe(200);
              });
              it("respects the disabled attribute", function() {
                replaceIndexFile("infinite-scroll-disabled='busy'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(0);
                element(By.id("action")).click();
                return expect(getItems().count()).toBe(100);
              });
              it("respects the infinite-scroll-distance attribute", function() {
                replaceIndexFile("infinite-scroll-distance='1'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToLastScreenScript(container, -20));
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToLastScreenScript(container, 20));
                return expect(getItems().count()).toBe(200);
              });
              return describe("with an event handler", function() {
                return it("calls the event handler on an event", function() {
                  replaceIndexFile("infinite-scroll-listen-for-event='anEvent'", throttle);
                  browser.get(pathToDocument);
                  expect(getItems().count()).toBe(100);
                  browser.driver.executeScript(collapseItemsScript(container));
                  expect(getItems().count()).toBe(100);
                  element(By.id("trigger")).click();
                  return expect(getItems().count()).toBe(200);
                });
              });
            });
            return describe("with throttling", function() {
              var throttle;
              throttle = browser.params.testThrottleValue;
              it("should be triggered immediately and when container is scrolled to the bottom", function() {
                replaceIndexFile("", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToBottomScript(container));
                expect(getItems().count()).toBe(100);
                browser.sleep(throttle);
                return expect(getItems().count()).toBe(200);
              });
              it("does not trigger immediately when infinite-scroll-immediate-check is false", function() {
                replaceIndexFile("infinite-scroll-immediate-check='false'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(0);
                element(By.id("force")).click();
                return expect(getItems().count()).toBe(100);
              });
              it("respects the disabled attribute and is throttled when page loads", function() {
                replaceIndexFile("infinite-scroll-disabled='busy'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(0);
                element(By.id("action")).click();
                expect(getItems().count()).toBe(0);
                browser.sleep(throttle);
                return expect(getItems().count()).toBe(100);
              });
              it("is not throttled when re-enabled if the throttle time has already elapsed", function() {
                replaceIndexFile("infinite-scroll-disabled='busy'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(0);
                browser.sleep(throttle);
                element(By.id("action")).click();
                return expect(getItems().count()).toBe(100);
              });
              it("respects the infinite-scroll-distance attribute", function() {
                replaceIndexFile("infinite-scroll-distance='1'", throttle);
                browser.get(pathToDocument);
                expect(getItems().count()).toBe(100);
                browser.driver.executeScript(scrollToLastScreenScript(container, 20));
                expect(getItems().count()).toBe(100);
                browser.sleep(throttle);
                return expect(getItems().count()).toBe(200);
              });
              return describe("with an event handler", function() {
                return it("calls the event handler on an event", function() {
                  replaceIndexFile("infinite-scroll-listen-for-event='anEvent'", throttle);
                  browser.get(pathToDocument);
                  expect(getItems().count()).toBe(100);
                  browser.driver.executeScript(collapseItemsScript(container));
                  expect(getItems().count()).toBe(100);
                  element(By.id("trigger")).click();
                  expect(getItems().count()).toBe(100);
                  browser.sleep(throttle);
                  return expect(getItems().count()).toBe(200);
                });
              });
            });
          }));
        }
        return results1;
      }));
    }
    return results;
  });

}).call(this);
